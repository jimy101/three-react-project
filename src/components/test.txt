import React, { useState, useRef, useEffect } from "react";

function CanvasDrawing() {
  const canvasRef = useRef(null);
  const [lines, setLines] = useState([]);
  const [isDrawing, setIsDrawing] = useState(false);
  const [startX, setStartX] = useState(null);
  const [startY, setStartY] = useState(null);
  const [endX, setEndX] = useState(null);
  const [endY, setEndY] = useState(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");

    function drawLine(x1, y1, x2, y2) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      console.log(lines);
      setLines([...lines, { startX: x1, startY: y1, endX: x2, endY: y2 }]);
      lines.forEach(function (line, index) {
        ctx.beginPath();
        ctx.moveTo(line.startX, line.startY);
        ctx.lineTo(line.endX, line.endY);
        ctx.stroke();
      });
    }

    function clearCanvas() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    function handleMouseDown(event) {
      const rect = canvas.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;
      setStartX(x);
      setStartY(y);
      setIsDrawing(true);
    }

    function handleMouseMove(event) {
      if (isDrawing) {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        const dx = Math.abs(x - startX);
        const dy = Math.abs(y - startY);

        if (dx > dy) {
          // Snap to horizontal line
          setEndX(x);
          setEndY(startY);
        } else {
          // Snap to vertical line
          setEndX(startX);
          setEndY(y);
        }

        clearCanvas();
      }
    }

    function handleMouseUp() {
      drawLine(startX, startY, endX, endY);
      setIsDrawing(false);
    }

    canvas.addEventListener("mousedown", handleMouseDown);
    canvas.addEventListener("mousemove", handleMouseMove);
    canvas.addEventListener("mouseup", handleMouseUp);

    return () => {
      canvas.removeEventListener("mousedown", handleMouseDown);
      canvas.removeEventListener("mousemove", handleMouseMove);
      canvas.removeEventListener("mouseup", handleMouseUp);
    };
  }, [isDrawing, startX, startY, endX, endY]);

  return (
    <canvas
      ref={canvasRef}
      width={800}
      height={600}
      style={{ border: "1px solid black" }}
    />
  );
}

export default CanvasDrawing;
